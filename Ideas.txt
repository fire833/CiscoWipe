
Ideas for indexing the data ingested by the serial read thread:
Read each set of 5 lines, indicated by every newline/ carriage return in the data stream. Program then will run a word analysis on each set of lines, with elif statements indicating each potentialword that could be found. If # is found for example, a new stage in each wipe process will begin where the wiping process in priviledged exec mode will begin depending on which product has either been specified or found by previous keywords found by the program, indicating which product it is working on. the list would include calls like #, Press RETURN to get started!, switch: router:, etc, all of which, when identified, would trigger other functions for the program to react correctly to each of the stage that the product is indicating that it is for further wiping. Other keywords such as: CISCO2911, CISCO1921, and other modesl would indicate that the next lines need to be sent to another part of the program for Makor processing, in that important data would need to be extrapolated and then placed in a queue for the tech class object to process when it is called after successful wiping of the product. 
Ideas for the CLI:
There will be several commands to listen for somehow, the method for CLI listening is TBD. But the main commands would be .tech, .wipe (for manual wiping purposes, if the program can't identify how to wipe, also would be used in earlier versions of the software), and .stop /.start, for the pruposes of starting and stopping manual reading of the device serial data stream, would be mostly needed for debugging purposes. 
Ideas for a separate bulk teching program. 
Create mutiple threads for multiple instances of a webdriver, so multiple items can be techd at once, probably between 3-5. They would each get the asset number from a list that can be somehow imported by the user, probably by being defined by a flag in the CLI, and then each asset is read, and depending on other flags, default pallet, grade, compliance, and process would be imputted by webdriver, and items would be techd. Hopefully can implement some sort of algorithm so depending on each asset, you could have flags tabbed next to the asset, that would indicate whether it should be in a certain pallet, certain grade, certain label, etc, or give certain descriptions as to the reason being techd this way (for example, with lots of assets that need to be scrapped, there could be 5 flags that get input by some wireless keyboard macro thing I could design that would age each asset with a certain flag that, when executed by the program, would apply those specific attributes to the tech page in Makor for that asset for greater specificity and accountability for each asset).
Threads needed and how they interact:
1 Thread would be a listener on the serial port, and then that thread would do the initial word search for each set of 5 lines. Another thread would be the serial writing thread, which would send out all finalized data to the device, whether it be automated or user input. Another thread would listen on the console side for commands, and have an initial list of elif statements, where each statement would trigger a different action in the program, whether it be tech and asset, enable direct pasthrough of data from the listener thread to the writing thread all the time (actually there may need to be multiple threads doing that or something, because with flags there could be multiple parameters that need to be taken into account during processing CLI commands). But then at the last elif statement, then the data inputted would be sent over to the sending thread to be sent over the wire to the end device, whatever the data may be. There would alos need to be a check that would automatically print the response to data sent in the command line, since automatic printing of received serial to the console is going to be off by default. 
For earlier versions of the software, an extra hoteys thread may be necesary to run the hotkey listener in order to listen for manual input to continue certain wiping functions, if the program doesnt have the automatic functionality built-in yet to know automatically when to proceed, for example with WAPs when there is sometimes a login prompt, and sometime there isn't. 
Ideas for processing some data from terminal to display in the console:
Take the data read from serial, and apply it to the console writer class. 
We will probably need 5 main threads for the applicaiton, one thread reading from serial, one thread reading from console, one thread writing to serial, one thread writing to the console, and one thread for Makor interaction. 
Thread class read from serial, will need to send data to the wiping portion of the application, and will also forward data to the write to console thread when certain criteria have been met. The reading from serial will forward most data to the writing to serial thread, which will handle all of the logic with finding which product is being wiped, which stages it is in, and what is needed to be done next in the wiping process. 